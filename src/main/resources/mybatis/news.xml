<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="dev.mvc.news.NewsDAOInter">
  <!-- 등록한 레코드 갯수 1 리턴, #{memberno}: public int getAdminno() 호출됨 -->
  <insert id="create" parameterType="dev.mvc.news.NewsVO">
    INSERT ALL
        INTO newscrawling(newscrawlingno, title, content, rdate)
        VALUES(newscrawling_seq.nextval, #{title}, #{content}, sysdate)
        
        INTO translate(translateno, title, content)
        VALUES(translate_seq.nextval, #{title}, #{content})
        
        INTO summary(summaryno, content)
        VALUES(summary_seq.nextval, #{content})
        
        INTO news(newsno, memberno, classifyno, newscrawlingno, translateno, summaryno, title, content, passwd, file1, file1saved, thumb1, size1, rdate)
        VALUES(news_seq.nextval, #{memberno}, #{classifyno}, newscrawling_seq.currval, translate_seq.currval, summary_seq.currval, 
        #{title}, #{content}, #{passwd}, #{file1}, #{file1saved}, #{thumb1}, #{size1}, sysdate)
    SELECT * FROM dual
  </insert>

  <select id="list_all" resultType="dev.mvc.news.NewsVO">
    SELECT newsno, memberno, classifyno, title, content, recom, cnt, replycnt, passwd, word, rdate,
               file1, file1saved, thumb1, size1, mp3
    FROM news

    ORDER BY newsno DESC
  </select>
  
  <!-- 특정 카테고리의 등록된 글목록 -->
  <select id="list_by_classifyno" resultType="dev.mvc.news.NewsVO" parameterType="int">
    SELECT newsno, memberno, classifyno, title, content, recom, cnt, replycnt, rdate,
              LOWER(file1) as file1, file1saved, thumb1, size1, mp3
    FROM news 
    WHERE classifyno = #{classifyno}
    ORDER BY newsno DESC
  </select> 
  
  <!-- 일반적인 조회 -->
  <select id="read" resultType="dev.mvc.news.NewsVO" parameterType="int">
    SELECT n.newsno, n.memberno, n.classifyno, c.title AS title, c.content as content, n.recom, n.cnt, n.replycnt, 
           n.passwd, n.word, n.rdate, n.file1, n.file1saved, n.thumb1, n.size1, n.map, n.youtube, n.newsgenre
    FROM news n, newscrawling c
    WHERE n.newsno = #{newsno} and c.newscrawlingno = n.newscrawlingno
  </select>
  
  <!-- map 등록, 수정, 삭제, 
         HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
                       보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
  <update id="map" parameterType="HashMap">
    UPDATE news SET map=#{map} WHERE newsno=#{newsno}
  </update>

  <!-- Youtube 등록, 수정, 삭제, 
         HashMap: VO 클래스는 변수가 너무 많아서 메모리 낭비가 발생함으로,
                       보통 3개 이하의 적은 변수만 전달하는 경우 HashMap 사용 권장 -->
  <update id="youtube" parameterType="HashMap">
    UPDATE news SET youtube=#{youtube} WHERE newsno=#{newsno}
  </update>

  <!-- 카테고리별 검색 목록 -->
  <select id="list_by_classifyno_search" resultType="dev.mvc.news.NewsVO" parameterType="HashMap">
    SELECT newsno, memberno, classifyno, title, content, recom, cnt, replycnt, word, rdate,
            file1, file1saved, thumb1, size1, map, youtube
    FROM news
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
        WHERE classifyno=#{classifyno}
      </when>
      <otherwise> <!-- 검색하는 경우 -->
        WHERE classifyno=#{classifyno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(content) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
    ORDER BY newsno DESC   
  </select>
   
  <!-- 카테고리별 검색 레코드 갯수 -->
  <select id="list_by_classifyno_search_count" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM news
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
        WHERE classifyno=#{classifyno}
      </when>
      <otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
        WHERE classifyno=#{classifyno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(content) LIKE '%' || UPPER(#{word}) || '%' 
                                                  OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
      </otherwise>
    </choose>
  </select>   

  <!-- 카테고리별 검색 + 페이징 목록 -->
  <select id="list_by_classifyno_search_paging" resultType="dev.mvc.news.NewsVO" parameterType="HashMap">
   SELECT newsno, memberno, classifyno, title, content, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube, r
   FROM (
              SELECT newsno, memberno, classifyno, title, content, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube, rownum as r
              FROM (
                        SELECT newsno, memberno, classifyno, title, content, recom, cnt, replycnt, rdate, file1, file1saved, thumb1, size1, map, youtube
                        FROM news
                        <choose>
                          <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
                            WHERE classifyno=#{classifyno}
                          </when>
                          <otherwise>
                            WHERE classifyno=#{classifyno} AND (UPPER(title) LIKE '%' || UPPER(#{word}) || '%' 
                                                              OR UPPER(content) LIKE '%' || UPPER(#{word}) || '%' 
                                                              OR UPPER(word) LIKE '%' || UPPER(#{word}) || '%'
                                                              )
                          </otherwise>
                        </choose>
                        ORDER BY newsno DESC
               )
    )
    WHERE <![CDATA[ r >= #{start_num} AND r <= #{end_num} ]]>
     
    <!-- 1 page: WHERE r >= 1 AND r <= 10; 
          2 page: WHERE r >= 11 AND r <= 20;
          3 page: WHERE r >= 21 AND r <= 30; -->
  </select>
  
  <!-- 패스워드 검사 -->
  <select id="password_check" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt 
    FROM news
    WHERE newsno = #{newsno} AND passwd=#{passwd}
  </select>
  
  <!-- 글 수정 -->
  <update id="update_text" parameterType="dev.mvc.news.NewsVO">
    MERGE INTO newscrawling c
    USING news n
    ON (n.newsno = #{newsno} AND n.newscrawlingno = c.newscrawlingno)
    WHEN MATCHED THEN
    UPDATE SET c.title = #{title}, c.content = #{content}
  </update>

  <!-- 파일 수정 -->
  <update id="update_file" parameterType="dev.mvc.news.NewsVO">
    UPDATE news
    SET file1=#{file1}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}
    WHERE newsno = #{newsno}
  </update>  

  <!-- 글 삭제 -->
  <delete id="delete" parameterType="int">
    DELETE FROM news
    WHERE newsno=#{newsno}
  </delete>
  
  <!-- FK classifyno 컬럼에 대응하는 필수 SQL -->
  <!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
  <select id="count_by_classifyno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM news 
    WHERE classifyno=#{classifyno}
  </select>
  
  <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_classifyno" parameterType="int">
    DELETE FROM news
    WHERE classifyno=#{classifyno}
  </delete>

  <!-- FK memberno 컬럼에 대응하는 필수 SQL -->
  <!-- 특정 카테고리에 속한 레코드 갯수를 리턴 -->
  <select id="count_by_memberno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM news 
    WHERE memberno=#{memberno}
  </select>
  
  <!-- 특정 카테고리에 속한 모든 레코드 삭제 -->
  <delete id="delete_by_memberno" parameterType="int">
    DELETE FROM news
    WHERE memberno=#{memberno}
  </delete>

   <!-- 댓글 수 증가 -->
   <update id="increaseReplycnt" parameterType="int">
     UPDATE news
     SET replycnt = replycnt + 1
     WHERE newsno = #{newsno}
   </update>

   <!-- 댓글 수 감소 -->
   <update id="decreaseReplycnt" parameterType="int">
     UPDATE news
     SET replycnt = replycnt - 1
     WHERE newsno = #{newsno}
   </update>
                    
  <select id="newsgenre" resultType="dev.mvc.news.NewsVO" parameterType="String">
    SELECT newsgenre, newsno, memberno, classifyno, title, content, recom, cnt, replycnt, passwd, word, rdate,
               file1, file1saved, thumb1, size1, mp3
    FROM news
    WHERE newsgenre = #{newsgenre}
    ORDER BY newsno DESC
  </select>

  <!-- 검색 갯수 -->
  <select id="list_search_count" resultType="Integer" parameterType="String">
    SELECT COUNT(*) as cnt
    FROM news
    <if test="word != null and word != ''"> <!-- 검색 상태라면 WHERE 생성 -->
      WHERE (UPPER(title) LIKE '%' || UPPER(#{word}) || '%') 
               OR (UPPER(content) LIKE '%' || UPPER(#{word}) || '%')
               OR (UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
    </if> 
    ORDER BY rdate ASC
  </select>

  <!-- 검색 + 페이징 -->
  <select id="list_search_paging" resultType="dev.mvc.news.NewsVO" parameterType="Map">
    SELECT newsno, classifyno, memberno, title, content, recom, cnt, replycnt, passwd, word, rdate, file1, file1saved, thumb1, size1, map, youtube, mp3, newsgenre, r
    FROM (
        SELECT newsno, classifyno, memberno, title, content, recom, cnt, replycnt, passwd, word, rdate, file1, file1saved, thumb1, size1, map, youtube, mp3, newsgenre, rownum AS r
        FROM (
            SELECT newsno, classifyno, memberno, title, content, recom, cnt, replycnt, passwd, word, rdate, file1, file1saved, thumb1, size1, map, youtube, mp3, newsgenre  
            FROM news
            <if test="word != null and word != ''"> <!-- 검색 상태라면 WHERE 생성 -->
                WHERE (UPPER(title) LIKE '%' || UPPER(#{word}) || '%') 
                   OR (UPPER(content) LIKE '%' || UPPER(#{word}) || '%')
                   OR (UPPER(word) LIKE '%' || UPPER(#{word}) || '%')
            </if>
            ORDER BY rdate DESC  <!-- 예시로 등록일을 기준으로 내림차순 정렬 -->
                 
        )
    )
    WHERE r &gt;= #{start_num} AND r &lt;= #{end_num}  <!-- WHERE r >= 1 AND r <= 3 -->
  </select>
              
  <select id="trans_sum" resultType="dev.mvc.news.NewsVO" parameterType="int">                    
    SELECT n.newsno, n.memberno, n.classifyno, t.title AS title, t.content as content, s.content as content2, n.recom, n.cnt, n.replycnt, 
           n.passwd, n.word, n.rdate, n.file1, n.file1saved, n.thumb1, n.size1, n.map, n.youtube, n.newsgenre
    FROM news n, translate t, summary s
    WHERE n.newsno = #{newsno} and t.translateno = n.translateno and s.summaryno = n.summaryno
                  
  </select>                    
  
</mapper> 